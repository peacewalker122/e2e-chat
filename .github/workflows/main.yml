name: Deploy Full-Stack Vite + WebSocket App

on:
  push:
    branches:
      - v.0

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: GHCR_TOKEN

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry (GHCR)
        run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ secrets.GHCR_USERNAME }}" --password-stdin

      - name: Build & Push Frontend Image
        run: |
          FRONTEND_IMAGE=ghcr.io/${{ secrets.GHCR_USERNAME }}/e2e-chat:latest-fe
          docker build -t $FRONTEND_IMAGE -f frontend.dockerfile .
          docker push $FRONTEND_IMAGE

      - name: Build & Push Backend Image
        run: |
          BACKEND_IMAGE=ghcr.io/${{ secrets.GHCR_USERNAME }}/e2e-chat:latest-be
          docker build -t $BACKEND_IMAGE -f server.dockerfile .
          docker push $BACKEND_IMAGE

      - name: Upload docker-compose.yml to VPS
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "deploy/production.yml"
          target: "/home/${{ secrets.SSH_USER }}/app"
          strip_components: 1

      - name: SSH into VPS & Deploy with Docker Compose
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            # Login to GitHub Container Registry
            echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ secrets.GHCR_USERNAME }}" --password-stdin
            
            # Pull latest images
            docker pull ghcr.io/${{ secrets.GHCR_USERNAME }}/e2e-chat:latest-fe
            docker pull ghcr.io/${{ secrets.GHCR_USERNAME }}/e2e-chat:latest-be
            
            # Deploy with docker compose
            cd ~/app
            docker compose -f production.yml up -d --force-recreate
            
            # Cleanup old images
            docker system prune -f
